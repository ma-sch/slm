### Inputs
- name: "Assert inputs of 'keycloak/client | create_client.yml'"
  assert:
    that:
      - (keycloak.url.external is defined) and (keycloak.url.external|length > 0)               # Auth URL of the Keycloak instance
      - (_keycloak_access_token is defined) and (_keycloak_access_token|length > 0)     # Access token to authenticate with Keycloak
      - (_keycloak_realm_name is defined) and (_keycloak_realm_name|length > 0)         # Name of the Keycloak realm where the client should be created
      - (_keycloak_client is defined) and (_keycloak_client|length > 0)                 # Definition of the client to be created

- include_tasks: authentication/get_admin_access_token.yml

- name: "Create Keycloak client '{{ _keycloak_client.client_id }}'"
  uri:
    url: "{{ keycloak.url.external }}/admin/realms/{{ _keycloak_realm_name }}/clients"
    validate_certs: no
    method: POST
    headers:
      authorization: "Bearer {{ _keycloak_access_token }}"
    body_format: json
    body:
      clientId: "{{ _keycloak_client.client_id }}"
      enabled: true
      protocol: "openid-connect"
      clientAuthenticatorType: "client-secret"
      publicClient: "{{ _keycloak_client.public_client }}"
      serviceAccountsEnabled: "{{ _keycloak_client.service_accounts_enabled }}"
      redirectUris:
        - "*"
      webOrigins:
        - "*"
      attributes:
        post.logout.redirect.uris: "+"
    status_code: 201, 409
  changed_when: output_create_ssp_client.status == 201
  register: output_create_ssp_client

- name: "Get uuid of '{{ _keycloak_client.client_id }}'"
  uri:
    url: "{{ keycloak.url.external }}/admin/realms/{{ _keycloak_realm_name }}/clients?clientId={{ _keycloak_client.client_id }}"
    validate_certs: no
    method: GET
    headers:
      authorization: "Bearer {{ _keycloak_access_token }}"
  register: output_get_client

- set_fact:
    client_uuid: "{{ output_get_client.json[0].id }}"

- name: "Create protocol mapper 'Groups' for '{{ _keycloak_client.client_id }}'"
  uri:
    url: "{{ keycloak.url.external }}/admin/realms/{{ _keycloak_realm_name }}/clients/{{ client_uuid }}/protocol-mappers/models"
    validate_certs: no
    method: POST
    headers:
      authorization: "Bearer {{ _keycloak_access_token }}"
    body_format: json
    body:
      name: "Groups"
      protocol: "openid-connect"
      protocolMapper: "oidc-group-membership-mapper"
      config:
        full.path: false
        id.token.claim: true
        access.token.claim: true
        claim.name: "groups"
        userinfo.token.claim: true
    status_code: 201, 409
  changed_when: output_create_client_protocol_mapper.status == 201
  register: output_create_client_protocol_mapper
  when: (_keycloak_client.protocol_mappers.groups is defined) and (_keycloak_client.protocol_mappers.groups)

- name: "Create protocol mapper 'Audience' for '{{ _keycloak_client.client_id }}'"
  uri:
    url: "{{ keycloak.url.external }}/admin/realms/{{ _keycloak_realm_name }}/clients/{{ client_uuid }}/protocol-mappers/models"
    validate_certs: no
    method: POST
    headers:
      authorization: "Bearer {{ _keycloak_access_token }}"
    body_format: json
    body:
      name: "Audience"
      protocol: "openid-connect"
      protocolMapper: "oidc-audience-mapper"
      config:
        included.client.audience: "{{ _keycloak_client.client_id }}"
        id.token.claim: "false"
        access.token.claim: "true"
    status_code: 201, 409
  changed_when: output_create_client_protocol_mapper.status == 201
  register: output_create_client_protocol_mapper
  when: (_keycloak_client.protocol_mappers.audience is defined) and (_keycloak_client.protocol_mappers.audience)

- name: "Assign client role 'realm-admin' to service account of client '{{ _keycloak_client.client_id }}'"
  include_role:
    name: "keycloak/client"
    tasks_from: roles/assign_client_role_to_service_account.yml
  vars:
    _client_id: "realm-management"
    _client_role_name: "realm-admin"
  when: _keycloak_client.assign_client_role_to_service_account

- name: "Store config of Keycloak client '{{ _keycloak_client.client_id }}' in Consul"
  include_role:
    name: "keycloak/client"
    tasks_from: clients/store_client_config_consul
  vars:
    client_id: "{{ _keycloak_client.client_id }}"
