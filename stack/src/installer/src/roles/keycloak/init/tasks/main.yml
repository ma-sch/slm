### Inputs
- name: "Assert inputs of 'keycloak/init | main.yml'"
  assert:
    that:
      - (keycloak.url.external is defined) and (keycloak.url.external|length > 0)
      - (KEYCLOAK.ADMIN_USERNAME is defined) and (KEYCLOAK.ADMIN_USERNAME|length > 0)
      - (KEYCLOAK.DEFAULT_USER_PASSWORD is defined) and (KEYCLOAK.DEFAULT_USER_PASSWORD|length > 0)
      - (CONSUL.SCHEME.INTERNAL is defined) and (CONSUL.SCHEME.INTERNAL|length > 0)
      - (CONSUL.HOST.INTERNAL is defined) and (CONSUL.HOST.INTERNAL|length > 0)
      - (CONSUL.PORT.INTERNAL is defined)
      - (_consul_token is defined) and (_consul_token|length > 0)

- name: "Get config"
  block:
  - name: "Keycloak | Check if config exists in Consul"
    community.general.consul_kv:
      scheme: "{{ CONSUL.SCHEME.INTERNAL }}"
      host: "{{ CONSUL.HOST.INTERNAL }}"
      port: "{{ CONSUL.PORT.INTERNAL }}"
      token: "{{ _consul_token }}"
      key: "config/keycloak/data"
    register: keycloak_config_consul

  - set_fact:
      keycloak_config: "{{ keycloak_config_consul.data.Value | from_yaml }}"
    when: keycloak_config_consul.data.Value is defined

  - name: "Create Keycloak config"
    block:
    - name: "Create admin password"
      set_fact:
        KEYCLOAK: "{{ KEYCLOAK | combine(
                    { 'ADMIN_PASSWORD': lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) }
                  , recursive=true) }}"
      when: (KEYCLOAK.ADMIN_PASSWORD is not defined) or (KEYCLOAK.ADMIN_PASSWORD | default([]) | length == 0)
    - name: "Create database password"
      set_fact:
        KEYCLOAK: "{{ KEYCLOAK | combine(
                    { 'DATABASE': { 
                      'PASSWORD': lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) 
                      }
                    }
                  , recursive=true) }}"
      when: (KEYCLOAK.DATABASE.PASSWORD is not defined) or (KEYCLOAK.DATABASE.PASSWORD | default([]) | length == 0)
    - name: "Create database root password"
      set_fact:
        KEYCLOAK: "{{ KEYCLOAK | combine(
                    { 'DATABASE': { 
                      'ROOT_PASSWORD': lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) 
                      }
                    }
                  , recursive=true) }}"
      when: (KEYCLOAK.DATABASE.ROOT_PASSWORD is not defined) or (KEYCLOAK.DATABASE.ROOT_PASSWORD | default([]) | length == 0)
    - name: "Update keycloak_config dictionary and override default values"
      set_fact:
        keycloak_config: "{{ keycloak_config | combine(
        { 'scheme': '{{ KEYCLOAK.SCHEME.INTERNAL }}',
          'host': '{{ KEYCLOAK.HOST.INTERNAL }}',
          'port': '{{ KEYCLOAK.PORT.INTERNAL }}',
          'users': {
            'admin': {
              'username': 'admin',
              'password': '{{ KEYCLOAK.ADMIN_PASSWORD }}'
            }
          },
          'database': {
            'password': '{{ KEYCLOAK.DATABASE.PASSWORD }}',
            'root_password': '{{ KEYCLOAK.DATABASE.ROOT_PASSWORD }}'
          }
        }
        , recursive=true) }}"
    - name: "Store Keycloak config in Consul"
      community.general.consul_kv:
        scheme: "{{ CONSUL.SCHEME.INTERNAL }}"
        host: "{{ CONSUL.HOST.INTERNAL }}"
        port: "{{ CONSUL.PORT.INTERNAL }}"
        token: "{{ _consul_token }}"
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        - { key: "config/keycloak/data", value: "{{ keycloak_config | to_yaml }}"  }
    when: keycloak_config_consul.data.Value is not defined

- name: "Register Keycloak instance at Consul (discovery server)"
  include_role:
    name: consul/client
    tasks_from: register_service
  vars:
    _service_name: auth
    _service_port: "8080"
    _service_address: "keycloak"
    _http: "{{ keycloak.url.internal }}/health"
    _additional_tags:
      - "keycloak"
      - "exposed"

- name: "Register Keycloak database at Consul (discovery server)"
  include_role:
    name: consul/client
    tasks_from: register_service
  vars:
    _service_name: "{{ KEYCLOAK.DATABASE.HOST.INTERNAL }}"
    _service_port: "{{ KEYCLOAK.DATABASE.PORT.INTERNAL }}"
    _service_address: "{{ KEYCLOAK.DATABASE.HOST.INTERNAL }}"
    _tcp: "{{ KEYCLOAK.DATABASE.HOST.INTERNAL }}:{{ KEYCLOAK.DATABASE.PORT.INTERNAL }}"
    _additional_tags:
      - "keycloak"
      - "database"
      - "docker-internal"

- name: "Start Keycloak containers"
  block:
    - name: "Create compose definition from template"
      set_fact:
        keycloak_compose: "{{ lookup('template', 'keycloak.yml') }}"
    - name: "Start containers"
      delegate_to: '{{ DEPLOYMENT_HOST_HOSTNAME }}'
      community.docker.docker_compose_v2:
        project_name: eclipse-slm
        definition: "{{ keycloak_compose | from_yaml}}"
        state: present
        pull: "{{ PULL_DOCKER_IMAGES }}"
    - name: "Wait for Keycloak ('{{ keycloak.url.external }}') being up"
      uri:
        url: "{{ keycloak.url.external }}"
        validate_certs: false
        status_code: 200
      register: result
      until: result.status == 200
      retries: 120
      delay: 3

- name: "Initialize Keycloak"
  block:
  - name: "Get admin access token"
    include_role:
      name: keycloak/client
      tasks_from: authentication/get_admin_access_token.yml

  - name: "Create realms"
    include_role:
      name: "keycloak/client"
      tasks_from: realms/create_realm.yml
    vars:
      _keycloak_access_token: "{{ keycloak_access_token }}"
      _keycloak_realm: "{{ item }}"
    loop: "{{ keycloak_realms }}"

  - name: "Create realm roles"
    include_role:
      name: "keycloak/client"
      tasks_from: roles/create_realm_role.yml
    vars:
      _keycloak_access_token: "{{ keycloak_access_token }}"
      _keycloak_realm_name: "{{ KEYCLOAK.REALM }}"
      _keycloak_realm_role: "{{ item }}"
    with_items: "{{ keycloak_realm_roles }}"

  - name: "Create users"
    import_tasks: create_users.yml

- name: "Update keycloak_config dictionary"
  set_fact:
    keycloak_config: "{{ keycloak_config | combine(
  { 'default_user_username': keycloak_default_user.username,
    'default_user_password': keycloak_default_user.credentials[0].value
  }
  , recursive=true) }}"

- name: "Store resulting compose file"
  template:
    src: "keycloak.yml"
    dest: "{{ _store_compose_file }}"
  when: (_store_compose_file is defined) and (_store_compose_file|length > 0)
