### Inputs
- name: "Assert inputs of 'awx/init | awx_init.yml'"
  assert:
    that:
      - (awx.url.internal is defined) and (awx.url.internal|length > 0)
      - (_awx_admin_username is defined) and (_awx_admin_username|length > 0)
      - (_awx_admin_password is defined) and (_awx_admin_password|length > 0)
      - (_consul_token is defined) and (_consul_token|length > 0)
      - (_awx_consul_token is defined) and (_awx_consul_token|length > 0)

- set_fact:
    _app_name: "awx"

- name: "Create Vault App Roles"
  include_role:
    name: vault/client
    tasks_from: create_approle_with_policies.yml
  vars:
    _vault_token: "{{ vault_root_token }}"
    _approle_name: "{{ approle.name }}"
    _approle_policies: "{{ approle.policies }}"
  loop: "{{ vault_approles }}"
  loop_control:
    loop_var: approle

- name: "Remove organization"
  awx.awx.organization:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "Self Service Portal"
    description: ""
    state: absent

- name: "Add organization"
  awx.awx.organization:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "{{ awx_slm_organization_name }}"
    description: ""
    state: present

- name: "Create default inventory"
  awx.awx.inventory:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "Default"
    description: "Default Inventory"
    organization: "{{ awx_slm_organization_name }}"
    state: present

- name: "Remove demo data"
  import_tasks: awx_remove_demo_data.yml

- name: "Add credential types"
  awx.awx.credential_type:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "{{ item.name }}"
    kind: cloud
    inputs: "{{ item.inputs }}"
    injectors: "{{ item.injectors }}"
    state: present
    validate_certs: false
  with_items: "{{ awx_credential_types }}"

- name: "Add credentials"
  awx.awx.credential:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "{{ item.name }}"
    credential_type: "{{ item.credential_type }}"
    organization: "{{ awx_slm_organization_name }}"
    inputs: "{{ item.inputs }}"
  with_items: "{{ awx_credentials }}"

- name: "Add Execution Environment"
  awx.awx.execution_environment:
    controller_host: "{{ awx.url.internal }}"
    controller_username: "{{ _awx_admin_username }}"
    controller_password: "{{ _awx_admin_password }}"
    name: "AWX-EE-SLM-1.4.0-SNAPSHOT"
    image: ghcr.io/eclipse-slm/awx-ee-slm:1.4.0-SNAPSHOT
    organization: "{{ awx_slm_organization_name }}"

- block:
  - debug:
      var: awx

  - name: "Create Keycloak client for AWX"
    include_role:
      name: keycloak/client
      tasks_from: clients/create_client.yml
    vars:
      _keycloak_client: "{{ awx_keycloak_client }}"
      _keycloak_access_token: "{{ keycloak_access_token }}"
      _keycloak_realm_name: "{{ ENV.KEYCLOAK.REALM }}"

  - name: "Get OIDC JSON for Keycloak client '{{ client_id }}'"
    include_role:
      name: keycloak/client
      tasks_from: clients/get_oidc-keycloak-json
    vars:
      _keycloak_access_token: "{{ keycloak_access_token }}"
      _keycloak_realm_name: "{{ ENV.KEYCLOAK.REALM }}"
      client_id: "{{ awx_keycloak_client.client_id }}"

  - name: "Create OIDC JSON Object"
    set_fact:
      keycloak_oidc_settings: "{{ keycloak_oidc_json }}"

  - name: "Create OIDC Settings"
    set_fact:
      new_oidc: "{{ lookup('template', 'oidc_settings.json.j2') }}"

  - assert:
      that:
        - (keycloak_oidc_settings is defined) and (keycloak_oidc_settings|length > 0)
      fail_msg: "Get of Keycloak OIDC settings failed"

  - name: "Configure AWX OIDC adapter "
    awx.awx.settings:
      controller_host: "{{ awx.url.internal }}"
      controller_username: "{{ _awx_admin_username }}"
      controller_password: "{{ _awx_admin_password }}"
      settings: "{{ new_oidc }}"
      validate_certs: False

  - name: "Create Auth Mapping Settings"
    set_fact:
      auth_mapping: "{{ lookup('template', 'auth_mapping_settings.json.j2') }}"

  - name: "Configure Auth Organization and Team Map "
    awx.awx.settings:
      controller_host: "{{ awx.url.internal }}"
      controller_username: "{{ _awx_admin_username }}"
      controller_password: "{{ _awx_admin_password }}"
      settings: "{{ auth_mapping }}"
      validate_certs: False
