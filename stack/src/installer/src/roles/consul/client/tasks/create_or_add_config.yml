### Inputs
- name: "Assert inputs of 'consul/client | create_or_add_config.yml'"
  assert:
    that:
      - (CONSUL.SCHEME.INTERNAL is defined) and (CONSUL.SCHEME.INTERNAL|length > 0)     # Scheme of the Consul instance
      - (CONSUL.HOST.INTERNAL is defined) and (CONSUL.HOST.INTERNAL|length > 0)         # Host of the Consul instance
      - (CONSUL.PORT.INTERNAL is defined)                                      # Port of the Consul instance
      - (_consul_token is defined) and (_consul_token|length > 0)     # Token to authenticate with Consul
      - (_app_name is defined) and (_app_name|length > 0)             # Name of the app for which the config should be stored
      - (_config is defined) and (_config|length > 0)                 # Dictionary with config values that should be created or added to existing config

- set_fact:
    __consul_kv_path: "config/{{ _app_name }}/data"

- name: "Check if config exists in Consul at '{{ __consul_kv_path }}'"
  set_fact:
    app_config_consul: "{{ lookup('community.general.consul_kv', __consul_kv_path, scheme=CONSUL.SCHEME.INTERNAL, host=CONSUL.HOST.INTERNAL, port=CONSUL.PORT.INTERNAL, token=_consul_token) | from_yaml }}"

- name: "Combine existing config in Consul with config values that should be created or updated"
  set_fact:
    _config_combined: "{{ app_config_consul | from_yaml | combine(_config, recursive=true) }}"

- name: "Store config in Consul to '{{ __consul_kv_path }}'"
  community.general.consul_kv:
    host: "{{ CONSUL.HOST.INTERNAL }}"
    port: "{{ CONSUL.PORT.INTERNAL }}"
    token: "{{ _consul_token }}"
    key: "{{ __consul_kv_path }}"
    value: "{{ _config_combined | to_yaml }}"

- name: "Add config to variable app_configs['{{ _app_name }}']"
  set_fact:
    app_configs: "{{ app_configs | default({}) | combine(
    { 
      _app_name: _config_combined
    }, recursive=true) }}"
