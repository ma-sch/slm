### Inputs
- name: "Assert inputs of 'consul/init | main.yml'"
  assert:
    that:
      - (consul.url.internal is defined) and (consul.url.internal|length > 0)                 # URL of the Consul instance to be configured
      - (_consul_token is defined) and (_consul_token|length > 0)           # Token to authenticate with Consul
      - (keycloak.url.internal is defined) and (keycloak.url.internal|length > 0)   # Auth URL of the Keycloak instance used for auth method

- name: "Consul Init | Wait for Keycloak ('{{ keycloak.url.internal }}') being up "
  uri:
    url: "{{ keycloak.url.internal }}/realms/fabos/.well-known/openid-configuration"
    validate_certs: false
    status_code: 200
  register: result
  until: result.status == 200
  retries: 120
  delay: 3

- debug:
    var: oidc_discovery_crt

- name: "Consul Init | Create auth method for Keycloak"
  uri:
    url: "{{ consul.url.internal }}/v1/acl/auth-method"
    method: PUT
    headers:
      authorization: "Bearer {{ _consul_token }}"
    body_format: json
    body:
      Name: keycloak
      Type: jwt
      Description: FabOS Keycloak Instance
      Config:
        OIDCDiscoveryURL: "{{ keycloak.url.external_without_port }}/realms/{{ ENV.KEYCLOAK.REALM }}"
        OIDCDiscoveryCACert: "{{ oidc_discovery_crt }}"
        ClaimMappings:
          given_name: first_name
          family_name: last_name
        ListClaimMappings:
          groups: groups
          "/realm_access/roles": resources
    status_code: 200
  register: output_put_auth_method

- block:
  - name: "Consul Init | Create SLM node"
    uri:
      url: "{{ consul.url.internal }}/v1/catalog/register"
      method: PUT
      headers:
        X-Consul-Token: "{{ _consul_token }}"
      body_format: json
      body:
        Node: "SLM"
        Address: "{{ SLM_HOSTNAME }}"
        NodeMeta:
          catalog_service_url: "{{ catalog_service.url.proxy }}"
          notification_service_url: "{{ notification_service.url.proxy }}"
          information_service_url: "{{ information_service.url.proxy }}"
          irs_url: "{{ irs.url.proxy }}"
          resource_management_url: "{{ resource_management.url.proxy }}"
          service_management_url: "{{ service_management.url.proxy }}"
          monitoring_service_url: "{{ monitoring_service.url.proxy }}"
          awx_url: "{{ awx.url.external }}"
          consul_url: "{{ catalog_service.url.external }}"
          vault_url: "{{ vault.url.external }}"
          keycloak_url: "{{ keycloak.url.external_without_port }}"
          aas_aas_gui_url: "{{ aas.aas_gui.url.proxy }}"
          aas_aas_discovery_url: "{{ aas.aas_discovery.url.proxy }}"
          aas_aas_registry_url: "{{ aas.aas_registry.url.proxy }}"
          aas_aas_repository_url: "{{ aas.aas_repository.url.proxy }}"
          aas_submodel_registry_url: "{{ aas.submodel_registry.url.proxy }}"
          aas_submodel_repository_url: "{{ aas.submodel_repository.url.proxy }}"
          aas_concept_description_repository_url: "{{ aas.concept_description_repository.url.proxy }}"
          minio_api_url: "{{ minio.url.api.external }}"
          minio_console_url: "{{ minio.url.console.external }}"
      status_code: 200

  - name: "Consul Init | Create policy for SLM node to make it publicly available"
    community.general.consul_policy:
      scheme: "{{ ENV.CONSUL.SCHEME.INTERNAL }}"
      host: "{{ ENV.CONSUL.HOST.INTERNAL }}"
      port: "{{ ENV.CONSUL.PORT.INTERNAL }}"
      token: "{{ _consul_token }}"
      name: anonymous-read
      rules: |
        node_prefix "SLM" {
          policy = "read"
        }

  - name: "Consul Init | Assign policy to anonymous token"
    community.general.consul_token:
      scheme: "{{ ENV.CONSUL.SCHEME.INTERNAL }}"
      host: "{{ ENV.CONSUL.HOST.INTERNAL }}"
      port: "{{ ENV.CONSUL.PORT.INTERNAL }}"
      token: "{{ _consul_token }}"
      state: present
      accessor_id: 00000000-0000-0000-0000-000000000002
      policies:
        - name: "anonymous-read"