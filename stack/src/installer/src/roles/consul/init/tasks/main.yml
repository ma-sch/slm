### Inputs
- name: "Assert inputs of 'consul/init | main.yml'"
  assert:
    that:
      - (consul.url.internal is defined) and (consul.url.internal|length > 0)                 # URL of the Consul instance to be configured
      - (_consul_token is defined) and (_consul_token|length > 0)           # Token to authenticate with Consul
      - (keycloak.url.internal is defined) and (keycloak.url.internal|length > 0)   # Auth URL of the Keycloak instance used for auth method

- name: "Consul Init | Wait for Keycloak ('{{ keycloak.url.internal }}') being up "
  uri:
    url: "{{ keycloak.url.internal }}/realms/fabos/.well-known/openid-configuration"
    validate_certs: false
    status_code: 200
  register: result
  until: result.status == 200
  retries: 120
  delay: 3

- debug:
    var: oidc_discovery_crt

- name: "Consul Init | Create auth method for Keycloak"
  uri:
    url: "{{ consul.url.internal }}/v1/acl/auth-method"
    method: PUT
    headers:
      authorization: "Bearer {{ _consul_token }}"
    body_format: json
    body:
      Name: keycloak
      Type: jwt
      Description: FabOS Keycloak Instance
      Config:
        OIDCDiscoveryURL: "{{ keycloak.url.external_without_port }}/realms/{{ ENV.KEYCLOAK.REALM }}"
        OIDCDiscoveryCACert: "{{ oidc_discovery_crt }}"
        ClaimMappings:
          given_name: first_name
          family_name: last_name
        ListClaimMappings:
          groups: groups
          "/realm_access/roles": resources
    status_code: 200
  register: output_put_auth_method
