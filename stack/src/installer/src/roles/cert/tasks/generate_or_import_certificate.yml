### Inputs
- name: "Assert inputs of 'slm/init | create_and_store_config.yml'"
  assert:
    that:
      - (ENV.CONSUL.SCHEME.INTERNAL is defined) and (ENV.CONSUL.SCHEME.INTERNAL|length > 0)   # Scheme of the Consul instance
      - (ENV.CONSUL.HOST.INTERNAL is defined) and (ENV.CONSUL.HOST.INTERNAL|length > 0)       # Host of the Consul instance
      - (ENV.CONSUL.PORT.INTERNAL is defined)                                             # Port of the Consul instance
      - (_consul_token is defined) and (_consul_token|length > 0)                     # Token to authenticate with Consul
      - (_common_name is defined) and (_common_name|length > 0)                       # Common Name used for the certificate

- set_fact:
    __consul_kv_path_crt: certs/traefik/crt
    __consul_kv_path_key: certs/traefik/key
    __consul_kv_path_csr: certs/traefik/csr

- name: "Check certificate in Consul"
  block:
  - name: "Check if certificate exists in Consul at '{{ __consul_kv_path_crt }}'"
    set_fact:
      existing_cert: "{{ lookup('community.general.consul_kv', __consul_kv_path_crt, scheme=CONSUL.SCHEME.INTERNAL, host=CONSUL.HOST.INTERNAL, port=CONSUL.PORT.INTERNAL, token=_consul_token) | from_yaml }}"
  - set_fact:
      generate_cert: false
      import_cert: false
    when: (existing_cert is defined) and (existing_cert|length > 0) and (existing_cert != "None")
  - debug:
      msg: "Certificate already exists in Consul, skipping generation or import"
    when: generate_cert is defined and import_cert is defined

- name: "Check if certificate is mounted for import"
  block:
  - name: "Check if certificate to import exists"
    stat:
      path: /certs/cert.crt
    register: cert_to_import_check
  - name: "Check if private key to import exists"
    stat:
      path: /certs/cert.key
    register: key_to_import_check
  - fail:
      msg: "Certificate to import exists, but private key not"
    when : cert_to_import_check.stat.exists and not key_to_import_check.stat.exists
  - fail:
      msg: "Private key to import exists, but certificate not"
    when : not cert_to_import_check.stat.exists and key_to_import_check.stat.exists
  - set_fact:
      import_cert: false
      generate_cert: true
    when:  not cert_to_import_check.stat.exists and not key_to_import_check.stat.exists
  - set_fact:
      import_cert: true
      generate_cert: false
    when:  cert_to_import_check.stat.exists and key_to_import_check.stat.exists
  when: generate_cert is not defined and import_cert is not defined

- name: "Generate self-signed certificate"
  block:
  - name: "Create private key"
    community.crypto.openssl_privatekey_pipe:
      type: RSA
    register: privatekey_output
  - name: "Generate an OpenSSL Certificate Signing Request"
    community.crypto.openssl_csr_pipe:
      privatekey_content: "{{ privatekey_output.privatekey }}"
      common_name: "{{ _common_name }}"
      use_common_name_for_san: true
      country_name: DE
      organization_name: Eclipse SLM
    register: csr_output
  - name: "Create simple self-signed certificate"
    community.crypto.x509_certificate_pipe:
      privatekey_content: "{{ privatekey_output.privatekey }}"
      csr_content: "{{ csr_output.csr }}"
      provider: selfsigned
    register: certificate_output
  - debug:
      msg: "Certificate and private key were generated"
  when: generate_cert == true

- name: "Import certificate from file"
  block:
    - set_fact:
        certificate_output:
          certificate: "{{ lookup('file', '/certs/cert.crt') }}"
        privatekey_output:
          privatekey: "{{ lookup('file', '/certs/cert.key') }}"
        csr_output:
          csr: "Certificate was imported and not generated by installer"
    - debug:
        msg: "Certificate and private key were imported"
  when: import_cert == true

- name: "Store certificate in Consul"
  community.general.consul_kv:
    scheme: "{{ ENV.CONSUL.SCHEME.INTERNAL }}"
    host: "{{ ENV.CONSUL.HOST.INTERNAL }}"
    port: "{{ ENV.CONSUL.PORT.INTERNAL }}"
    token: "{{ _consul_token }}"
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - { key: "certs/traefik/crt", value: "{{ certificate_output.certificate }}" }
    - { key: "certs/traefik/key", value: "{{ privatekey_output.privatekey }}" }
    - { key: "certs/traefik/csr", value: "{{ csr_output.csr }}" }
  when: import_cert == true or generate_cert == true

- name: "Convert certificate to format suitable for OIDC discovery CA property required to add Keycloak JWT auth to Vault and Consul"
  block:
  - set_fact:
      existing_cert: "{{ certificate_output.certificate }}"
    when: import_cert == true or generate_cert == true
  - set_fact:
      oidc_discovery_crt: "{{ existing_cert | regex_replace(' ', '\n') | regex_replace('-----BEGIN\nCERTIFICATE-----', '-----BEGIN CERTIFICATE-----') | regex_replace('-----END\nCERTIFICATE-----', '-----END CERTIFICATE-----') }}"