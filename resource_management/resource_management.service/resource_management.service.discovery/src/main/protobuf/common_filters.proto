// MIT License
//
//  Copyright (c) 2024 Siemens AG
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

// Filter type and option definitions
syntax = "proto3";

import "common_variant.proto";
import "common_operators.proto";


package siemens.common.filters.v1;


message SupportedFilter {
    string key = 1;
    siemens.common.types.v1.VariantType datatype = 2;
}

message SupportedOption {
    string key = 1;
    siemens.common.types.v1.VariantType datatype = 2;
}

message ActiveFilter {
    string key = 1; // e.g. Timeout
    // array of raw-data
    siemens.common.operators.v1.ComparisonOperator operator = 2; //optional
    siemens.common.types.v1.Variant value = 3;
}


message ActiveOption {
    string key = 1; // e.g. Timeout
    // array of raw-data
    siemens.common.operators.v1.ComparisonOperator operator = 2; //optional (when missing it means EQUAL)
    siemens.common.types.v1.Variant value = 3;
}

// Get list of supported filter types from the connector

message FilterTypesRequest {
    //void
}

message FilterTypesResponse {
    repeated SupportedFilter filter_types = 1;
}

// Get list of supported filter options from the connector

message FilterOptionsRequest {
    //void
}

message FilterOptionsResponse {
    repeated SupportedOption filter_options = 1;
}
