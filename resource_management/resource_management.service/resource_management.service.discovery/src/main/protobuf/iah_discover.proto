// MIT License
//
//  Copyright (c) 2024 Siemens AG
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

// Device Discover Interface

syntax = "proto3";

import "common_address.proto";
import "common_filters.proto";
import "common_identifiers.proto";

package siemens.industrialassethub.discover.v1;

service DeviceDiscoverApi {
    // Get the list of supported Filter Types
    rpc GetFilterTypes ( siemens.common.filters.v1.FilterTypesRequest ) returns (siemens.common.filters.v1.FilterTypesResponse) {}
    // Get the list of supported Filter Options
    rpc GetFilterOptions ( siemens.common.filters.v1.FilterOptionsRequest ) returns (siemens.common.filters.v1.FilterOptionsResponse) {}

    // Start a device discovery with given filters and options.
    // Returns the discovered devices.
    rpc DiscoverDevices (DiscoverRequest) returns (stream DiscoverResponse) {}
}

message DiscoverRequest {
    /*
    optional: Filters which are used to filter the discover result, e.g. a special device type
    values of identical keys are logically "OR" combined
    values of different keys are logically "AND" combined
    */
    repeated siemens.common.filters.v1.ActiveFilter filters = 1;
    /*
    optional: Options which are used to perform the discover, e.g. timeout, hircharchie level, ...
    values of identical keys are logically "OR" combined
    values of different keys are logically "AND" combined
    */
    repeated siemens.common.filters.v1.ActiveOption options = 2;
    /*
    optional: Specify the target where the discovery should be performed
    If it's not specified, the whole system is scanned
    */
    repeated siemens.common.address.v1.Destination target = 3;
}

message DiscoverResponse {
    // Holds information on one or more discovered devices
    repeated DiscoveredDevice devices = 1;
}

message DiscoveredDevice {
    // List of default device identifiers of a device supported by the protocol
    repeated siemens.common.identifiers.v1.DeviceIdentifier identifiers = 1;

    // The whole connection parameters, to establish the communciation with
    // the discovered device, including the schema and subdriver configuration
    siemens.common.address.v1.ConnectionParameterSet connection_parameter_set = 2;

    // Timestamp when device was last seen
    // 64 bit unsigned integer which represents the number
    // of 100 nano-second [0.1 microsec] intervals since January 1, 1601 (UTC).
    fixed64 timestamp = 3;
}
